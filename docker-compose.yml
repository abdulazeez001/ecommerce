version: '3.0'

services:
  # Order API service
  ecommerce_order_api:
    build:
      context: ./order-service
      dockerfile: ./Dockerfile
    ports:
      - '40001:30000'
      - '40002:30001'
    stdin_open: true
    tty: true
    volumes:
      - ./order-service:/api
    env_file:
      - .env
    environment:
      - DATABASE_HOST=mongodb
      - DATABASE_NAME=EcommerceOrderApiDBDev
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_PORT=27017
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mongodb
      - rabbitmq
      - redis

  # User API service
  ecommerce_user_api:
    build:
      context: ./owner-service
      dockerfile: ./Dockerfile
    ports:
      - '40002:30000'
      - '40003:30001'
    stdin_open: true
    tty: true
    volumes:
      - ./owner-service:/api
    env_file:
      - .env
    environment:
      - DATABASE_HOST=mongodb
      - DATABASE_NAME=EcommerceUserApiDBDev
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_PORT=27017
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mongodb
      - rabbitmq
      - redis

  # Product API service
  ecommerce_product_api:
    build:
      context: ./product-service
      dockerfile: ./Dockerfile
    ports:
      - '40004:30000'
      - '40005:30001'
    stdin_open: true
    tty: true
    volumes:
      - ./product-service:/api
    env_file:
      - .env
    environment:
      - DATABASE_HOST=mongodb
      - DATABASE_NAME=EcommerceProductApiDBDev
      - DATABASE_USER=user
      - DATABASE_PASSWORD=password
      - DATABASE_PORT=27017
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - mongodb
      - rabbitmq
      - redis

  # Worker service
  ecommerce_api_worker:
    build:
      context: ./worker-service
      dockerfile: ./Dockerfile
    stdin_open: true
    tty: true
    volumes:
      - ./worker-service:/worker
    env_file:
      - .env
    environment:
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - RABBITMQ_USERNAME=guest
      - RABBITMQ_PASSWORD=guest
      - RABBITMQ_QUEUE_PREFIX=ecommerce-dev
      - RABBITMQ_VHOST=/
      - RABBITMQ_TLS=false
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      - rabbitmq
      - redis

  # MongoDB service
  mongodb:
    image: mongo:6.0
    restart: on-failure
    environment:
      MONGO_INITDB_ROOT_USERNAME: user
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - mongo_data:/data/db

  # RabbitMQ service
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - '5672:5672'
      - '15672:15672' # Management UI
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq

  # Redis service
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    
  # Nginx as API Gateway / Load Balancer
  nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - ecommerce_order_api
      - ecommerce_user_api
      - ecommerce_product_api
    restart: unless-stopped

volumes:
  mongo_data:
  rabbitmq_data:
  redis_data:
